version: '3.8'

x-base-service: &base_service
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
  networks:
    - ugc

x-redis: &base_redis
  <<: *base_service
  image: redis:7.0-alpine
  container_name: redis
  restart: unless-stopped
  expose:
    - ${REDIS_PORT}
  healthcheck:
    test: [ "CMD", "redis-cli","ping" ]
    interval: 30s
    timeout: 10s
    retries: 5

x-base-clickhouse-node: &base-clickhouse-node
  <<: *base_service
  image: yandex/clickhouse-server:22.1
  env_file: .env
  mem_limit: 1g
  expose:
    - 9000
    - 8123
  ulimits:
    memlock:
      soft: -1
      hard: -1
  depends_on:
    - zookeeper-clickhouse
  healthcheck:
    test: curl http://x-base-clickhouse-node:8123 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
    interval: 30s
    timeout: 10s
    retries: 5

x-base-kafka: &base_kafka
  <<: *base_service
  image: confluentinc/cp-kafka:7.3.0
  volumes:
    - /etc/localtime:/etc/localtime:ro
    - /etc/timezone:/etc/timezone:ro
    - ./kafka/start.sh:/tmp/start.sh
  command: "bash -c 'if [ ! -f /tmp/start.sh ]; then echo \"ERROR: Did you forget the start.sh file that came with this docker-compose.yml file?\" && exit 1 ; else /tmp/start.sh && /etc/confluent/docker/run ; fi'"

x-airflow-common:
  &airflow-common
  <<: *base_service
  profiles:
    - dev_ugc
    - dev_graduate
    - prod
  build:
    context: ./
    dockerfile: ./backend/clickhouse_initer/airflow.Dockerfile
    args:
      CH_INIT_DATA_PATH: ${CH_INIT_DATA_PATH}
  env_file: .env
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: CeleryExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
    AIRFLOW__CELERY__BROKER_URL: redis://:@redis:6379/0
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}

  volumes:
      - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
      - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
      - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    postgres:
      condition: service_healthy

services:

  nginx:
    <<: *base_service
    image: nginx:1.23.1-alpine
    container_name: nginx
    profiles:
      - dev_ugc
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/configs/producer_storage.conf:/etc/nginx/conf.d/producer_storage.conf:ro
      - ./nginx/static/errors:/var/www/errors/:ro
      - ./nginx/static/log/access_log:/var/log/nginx/access.log:rw
      - ./nginx/static/log/error_log:/var/log/nginx/error.log:rw
    depends_on:
      producer-storage:
        condition: service_healthy
    ports:
      - ${PRODUCER_STORAGE_PORT}:${PRODUCER_STORAGE_PORT}


  redis:
    <<: *base_redis
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"


  producer-storage:
    <<: *base_service
    build: ./backend/producer_storage
    container_name: producer-storage
    env_file: .env
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./backend/producer_storage:/opt/content
    expose:
      - ${PRODUCER_STORAGE_PORT}
    healthcheck:
      test: curl http://producer-storage:${PRODUCER_STORAGE_PORT} >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 30s
      timeout: 10s
      retries: 5


  kafka01:
    <<: *base_kafka
    hostname: kafka01
    container_name: kafka01
    env_file: .env
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka01:9092,CONTROLLER://kafka01:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka01:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka01:9093,2@kafka02:9093,3@kafka03:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'


  kafka02:
    <<: *base_kafka
    hostname: kafka02
    container_name: kafka02
    env_file: .env
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka02:9092,CONTROLLER://kafka02:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka02:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka01:9093,2@kafka02:9093,3@kafka03:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'


  kafka03:
    <<: *base_kafka
    hostname: kafka03
    container_name: kafka03
    env_file: .env
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_LISTENERS: PLAINTEXT://kafka03:9092,CONTROLLER://kafka03:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka03:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka01:9093,2@kafka02:9093,3@kafka03:9093'
      KAFKA_PROCESS_ROLES: 'broker,controller'


  control-center:
    <<: *base_service
    image: confluentinc/cp-enterprise-control-center:7.3.0
    hostname: control-center
    container_name: control-center
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    depends_on:
      - kafka01
      - kafka02
      - kafka03
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka01:9092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021
    healthcheck:
      test: curl http://control-center:9021 >/dev/null; if [[ $$? == 52 ]]; then echo 0; else echo 1; fi
      interval: 60s
      timeout: 30s
      retries: 15

  zookeeper-clickhouse:
    <<: *base_service
    image: confluentinc/cp-zookeeper:7.3.0
    hostname: zookeeper-clickhouse
    container_name: zookeeper-clickhouse
    profiles:
      - clickhouse
      - dev_ugc
      - dev_graduate
      - prod
    environment:
      ZOOKEEPER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - clickhouse-zookeeper:/var/lib/zookeeper
    mem_limit: 1g
    ulimits:
      memlock:
        soft: -1
        hard: -1


  clickhouse-initer:
    <<: *base_service
    build: ./backend/clickhouse_initer
    container_name: clickhouse-initer
    env_file: .env
    profiles:
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./backend/clickhouse_initer/mapping:/opt/clickhouse_initer/mapping:ro
      - ./backend/clickhouse_initer/data:/opt/clickhouse_initer/data:ro
    depends_on:
      clickhouse-node1:
        condition: service_healthy
      clickhouse-node2:
        condition: service_healthy
      clickhouse-node3:
        condition: service_healthy
      clickhouse-node4:
        condition: service_healthy


  clickhouse-node1:
    <<: *base-clickhouse-node
    container_name: clickhouse-node1
    profiles:
      - clickhouse
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./clickhouse/config/node1/users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/config/node1/config.d:/etc/clickhouse-server/config.d
      - ./clickhouse/config/node1/config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/config/metrika.xml:/etc/metrika.xml

  clickhouse-node2:
    <<: *base-clickhouse-node
    container_name: clickhouse-node2
    profiles:
      - clickhouse
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./clickhouse/config/metrika.xml:/etc/metrika.xml
      - ./clickhouse/config/node2/users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/config/node2/config.d:/etc/clickhouse-server/config.d
      - ./clickhouse/config/node2/config.xml:/etc/clickhouse-server/config.xml

  clickhouse-node3:
    <<: *base-clickhouse-node
    container_name: clickhouse-node3
    profiles:
      - clickhouse
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./clickhouse/config/metrika.xml:/etc/metrika.xml
      - ./clickhouse/config/node3/users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/config/node3/config.d:/etc/clickhouse-server/config.d
      - ./clickhouse/config/node3/config.xml:/etc/clickhouse-server/config.xml



  clickhouse-node4:
    <<: *base-clickhouse-node
    container_name: clickhouse-node4
    profiles:
      - clickhouse
      - dev_ugc
      - dev_graduate
      - prod
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./clickhouse/config/metrika.xml:/etc/metrika.xml
      - ./clickhouse/config/node2/users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/config/node4/config.d:/etc/clickhouse-server/config.d
      - ./clickhouse/config/node4/config.xml:/etc/clickhouse-server/config.xml

  postgres:
      <<: *base_service
      image: postgres:13
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
      profiles:
        - dev_ugc
        - dev_graduate
        - prod
      volumes:
        - postgres-db-volume:/var/lib/postgresql/data
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "airflow"]
        interval: 5s
        retries: 5
      restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - 8080:8080
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: [ "CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"' ]
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    <<: *airflow-common
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 10s
      timeout: 10s
      retries: 5
    environment:
      <<: *airflow-common-env
      # Required to handle warm shutdown of the celery workers properly
      # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
      DUMB_INIT_SETSID: "0"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 10s
      timeout: 10s
      retries: 5
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        function ver() {
          printf "%04d%04d%04d%04d" $${1//./ }
        }
        airflow_version=$$(AIRFLOW__LOGGING__LOGGING_LEVEL=INFO && gosu airflow airflow version)
        airflow_version_comparable=$$(ver $${airflow_version})
        min_airflow_version=2.2.0
        min_airflow_version_comparable=$$(ver $${min_airflow_version})
        if (( airflow_version_comparable < min_airflow_version_comparable )); then
          echo
          echo -e "\033[1;31mERROR!!!: Too old Airflow version $${airflow_version}!\e[0m"
          echo "The minimum Airflow version supported: $${min_airflow_version}. Only use this or higher!"
          echo "airflow_version_comparable: $${airflow_version_comparable}"
          echo "min_airflow_version_comparable: $${min_airflow_version_comparable}"
          echo "airflow_version: $${airflow_version}"
          echo "min_airflow_version: $${min_airflow_version}"
          echo
          exit 1
        fi
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
      _PIP_ADDITIONAL_REQUIREMENTS: ''
    user: "0:0"
    depends_on:
      clickhouse-node1:
        condition: service_healthy
      clickhouse-node2:
        condition: service_healthy
      clickhouse-node3:
        condition: service_healthy
      clickhouse-node4:
        condition: service_healthy
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources


networks:
  ugc:
    driver: bridge


volumes:
  redis-data:
  clickhouse-zookeeper:
  postgres-db-volume:
